@model CrudOpration.Models.Student

@{
    ViewBag.Title = "Create student";
}

<h2>Create</h2>
<script src="~/Scripts/jquery-3.4.1.min.js"></script>
<script src="~/Scripts/jquery.validate.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>



@using (Html.BeginForm("Create", "Student", FormMethod.Post, new { @id = "registerFormId", @class = "form-horizontal", role = "form" }))
{

    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Student</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2", @id = "MyName" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2", @id = "MyEmail" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2", @id = "MyAddress" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                <span id="Addressid" class="message"></span>
            </div>
        </div>

        <div class="form-group">

            @Html.LabelFor(model => model.Mobile, htmlAttributes: new { @class = "control-label col-md-2", @id = "MyMobile" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Mobile, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Mobile, "", new { @class = "text-danger" })
                <span id="mobilenumber" class="message"></span>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" id="btnSave" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>

}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<script>
    $(document).ready(function () {
        $('#btnSave').click(function () {
            var Name, Email, Address, Mobile, emailExp;
            Name = $("#Name").val();
            Email = $("#Email").val();
            Address = $("#Address").val();
            Mobile = $("#Mobile").val();
            if (Name == '' && Email == '' && Mobile == '' && Address == '') {
                alert("Enter All Fields");
                return false;
            }
            if (Name == '') {
                alert("Please Enter Name");
                return false;
            }
            if (Email == '') {
                alert("Please Enter Email");
                return false;
            }
            if (Email != null) {
                var pattern = new RegExp(/^(("[\w-\s]+")|([\w-]+(?:\.[\w-]+)*)|("[\w-\s]+")([\w-]+(?:\.[\w-]+)*))(@@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$)|(@@\[?((25[0-5]\.|2[0-4][0-9]\.|1[0-9]{2}\.|[0-9]{1,2}\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\]?$)/i);
                var data = pattern.test(Email);
                if (data) {

                } else {
                    alert("email is invalid")
                    return false;
                }

            }
            if (Address == '') {

                document.getElementById("Addressid").textContent += "Please Enter Address";
                const note = document.querySelector('.message');
                note.style.color = 'red';
                return false;
            }
            if (Mobile == '' || Mobile == null || Mobile.length < 10) {
                var filter = /^\d*(?:\.\d{1,2})?$/;

                if (filter.test(Mobile)) {
                    if (Mobile.length == 10) {


                    } else {
                        document.getElementById("mobilenumber").textContent += "Please put 10  digit mobile number";
                        const note = document.querySelector('.message');
                        note.style.color = 'red';
                        return false;
                    }
                }
                else {
                    document.getElementById("mobilenumber").textContent += "Not a valid number";
                    return false;
                }
            }



            return true;
        })


    });
</script>

